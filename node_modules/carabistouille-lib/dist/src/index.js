"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function generateInsult() {
    return makeInsult().long;
}
exports.generateInsult = generateInsult;
function generateInsultFull() {
    return makeInsult();
}
exports.generateInsultFull = generateInsultFull;
//return an new insult
var makeInsult;
//tools
var capitalizeFirstLetter;
var replaceAt;
var startWithAVoyelle;
//Database
var accroches = ["espèce de ", "tu t'es vu avec ta face de ", "fils de ", "fille de ", "rentre chez toi, ", "", "", "", "", "", "rentre chez ta mère, ", "hé, ", "passe ton chemin, ", "parle à ma main, ", "qu'est-ce que tu va faire, ", "je vais t'écraser, ", "ton temps est compté, "];
var accrocheSansArticles = ["t'es qu'", "t'as la gueule d'", "tu me fait penser à "];
var noms = ["hippie", "hipster", "communiste", "nazi", "clown", "nerd", "prout", "pirate", "quadrupède", "aztèque", "ivrogne", "macaque", "technocrate", "vampire", "environementaliste", "capitaliste"];
var nomsF = ["raclure", "pourriture", "chaussette", "mule", "limace", "huître", "horloge murale", "carie", "chèvre", "pile", "crème pâtissière", "annesse", "niche", "camionnette", "machine à laver", "baignoire", "pastèque", "bossue", "chauve-souris", "flaque", "luge", "gourgandine", "antiquité", "caisse", "pantoufle", "cornemuse", "patate", "végétarienne", "perruche", "farceuse", "boite de conserve", "graine", "brouette", "scélérate", "délinquante", "levure", "gorge", "machine à écrire", "mononucléose", "mamie", "gobeuse de mouches", "courgette", "aubergine", "patate douce", "omelette", "chaise"];
var nomsM = ["canoe", "jambon", "hibou", "caniveau", "gaufrier", "biscuit", "montagnard", "goblin", "mangeur de tarte", "dromadaire", "bâteau à voile", "fakir", "monosourcil", "pneu creuvé", "fond de placard", "poil de nez", "corps au pied", "accordéon", "poney", "sac à douche", "égoutoir", "zèbre", "clairon", "post-it", "robinet", "bossu", "rouleau à pâtisserie", "igloo", "benne à ordure", "chiffon", "poulpe", "fémur", "ravioli", "apache", "athlète", "bandit", "bibelot", "cornichon", "chaufard", "cigare", "diplodocus", "galopin", "hydrocarbure", "tapis", "topinambour", "végétarien", "farceur", "mille-pattes", "chercheur", "convoyeur", "scélérat", "délinquant", "loubard", "orifice", "enzyme", "épouvantail", "lombric", "brouillon", "déserteur", "vendeur de mort", "papy", "gobeur de mouches", "clocher", "manant", "mécréant", "hamster", "porte-manteau", "champignon", "potiron", "parapluie", "citron", "cucurbitacé", "chou-fleur", "brocoli", "épinard", "tiroir", "bureau", "salsifis"];
var adjectifs = ["étrange", "communiste", "de mes deux", "stupide", "ignoble", "aveugle", "immense", "zinzin", "sans fond", "convexe", "en plastique", "de mauvaise famille", "verdâtre", "analphabète", "mégalomane", "ramollie", "interplanétaire", "en chaussette", "bancale", "indéchiffrable", "angoissant", "lubrique", "tolérable", "vulgaire", "minable", "négligeable", "pas pire", "convenable", "cataclysmique", "catastrophique", "boute-en-train", "épouventable", "innommable", "incrédule", "névralgique", "en carton", "d'eau douce", "dégeulasse", "médiocre", "pas trop drole", "pas cool", "égoiste", "malhonnête", "rectangulaire", "capitaliste", "lamentable", "sporadique"];
var adjectifsF = ["puante", "ideuse", "dégénérée", "pas belle", "bruyante", "usagée", "trouée", "dissonante", "pas fraiche", "manquée", "ancienne", "pas terminée", "bossue", "cabossée", "boueuse", "dévergondée", "maquillée", "volante", "hurluberlue", "vénéneuse", "écervelée", "revendicatrice", "absolue", "recyclée", "pas satisfaisante", "disjonctée", "ennuyante", "insuffisante", "insignifiante", "infernale", "satelisée", "lyophilisée", "déshydratée", "assistée", "bigarée", "hâtive", "méchante", "defectueuse", "blonde", "paresseuse", "bavarde", "rutilante", "spongieuse"];
var adjectifsM = ["puant", "ideux", "dégénéré", "pas beau", "bruyant", "usagé", "troué", "dissonant", "pas frais", "manqué", "ancien", "pas terminé", "bossu", "cabossé", "boueux", "niais", "dévergondé", "maquillé", "volant", "hurluberlu", "vénéneux", "écervelé", "revendicateur", "absolu", "recyclé", "pas satisfaisant", "disjoncté", "ennuyant", "insuffisant", "insignifiant", "infernal", "satelisé", "lyophilisé", "déshydraté", "assisté", "bigaré", "hâtif", "méchant", "defectueux", "blond", "paresseux", "bavard", "rutilant", "spongieux"];
var allAdjectifs = adjectifs.concat(adjectifsF).concat(adjectifsM);
capitalizeFirstLetter = function (string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
};
replaceAt = function (str, index, character) {
    return str.substr(0, index) + character + str.substr(index + character.length);
};
startWithAVoyelle = function (string) {
    if (string.charAt(0) == "a" ||
        string.charAt(0) == "e" ||
        string.charAt(0) == "i" ||
        string.charAt(0) == "o" ||
        string.charAt(0) == "u" ||
        string.charAt(0) == "h") {
        return true;
    }
    return false;
};
makeInsult = function () {
    var insult = { short: "", long: "" };
    var statement = "";
    var accroche = accroches[Math.floor(Math.random() * accroches.length)];
    var accrocheSansArticle = accrocheSansArticles[Math.floor(Math.random() * accrocheSansArticles.length)];
    var nom = noms[Math.floor(Math.floor(Math.random() * noms.length))];
    var nomF = nomsF[Math.floor(Math.random() * nomsF.length)];
    var nomM = nomsM[Math.floor(Math.random() * nomsM.length)];
    var adjectif = adjectifs[Math.floor(Math.random() * adjectifs.length)];
    var allAdjectif = allAdjectifs[Math.floor(Math.random() * allAdjectifs.length)];
    var adjectifF = adjectifsF[Math.floor(Math.random() * adjectifsF.length)];
    var adjectifM = adjectifsM[Math.floor(Math.random() * adjectifsM.length)];
    var needApostropheNom = false;
    var needApostropheNomF = false;
    var needApostropheNomM = false;
    if ((accroche.charAt(accroche.length - 2) == "e")
        ||
            (accroche.charAt(accroche.length - 2) == "a")) {
        if (startWithAVoyelle(nom)) {
            needApostropheNom = true;
        }
        if (startWithAVoyelle(nomF)) {
            needApostropheNomF = true;
        }
        if (startWithAVoyelle(nomM)) {
            needApostropheNomM = true;
        }
    }
    if (Math.floor(Math.random() * 6) == 0) {
        switch (Math.floor(Math.random() * 4)) {
            case 0:
                accrocheSansArticle = "" + accrocheSansArticle + "un ";
                statement = "" + nomM + " " + adjectifM;
                break;
            case 1:
                accrocheSansArticle = "" + accrocheSansArticle + "une ";
                statement = "" + nomF + " " + adjectifF;
                break;
            case 2:
                accrocheSansArticle = "" + accrocheSansArticle + "un ";
                statement = "" + nom + " " + adjectifM;
                break;
            case 3:
                accrocheSansArticle = "" + accrocheSansArticle + "une ";
                statement = "" + nom + " " + adjectifF;
                break;
        }
        insult.short = statement;
        statement = "" + accrocheSansArticle + statement;
    }
    else {
        switch (Math.floor(Math.random() * 3)) {
            case 0:
                if (needApostropheNom) {
                    accroche = replaceAt(accroche, accroche.length - 2, "'");
                    accroche = accroche.slice(0, -1);
                }
                statement = "" + nom + " " + allAdjectif;
                break;
            case 1:
                if (needApostropheNomM) {
                    accroche = replaceAt(accroche, accroche.length - 2, "'");
                    accroche = accroche.slice(0, -1);
                }
                statement = "" + nomM + " " + adjectifM;
                break;
            case 2:
                if (needApostropheNomF) {
                    accroche = replaceAt(accroche, accroche.length - 2, "'");
                    accroche = accroche.slice(0, -1);
                }
                statement = "" + nomF + " " + adjectifF;
                break;
        }
        insult.short = statement;
        statement = "" + accroche + statement;
    }
    statement += " !";
    statement = capitalizeFirstLetter(statement);
    insult.long = statement;
    return insult;
};
